{"version":3,"sources":["images/bomb.png","components/AppBar.jsx","components/Button.jsx","components/Input.jsx","components/ClearButton.jsx","components/BackButton.jsx","components/Bomb.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AppBar","props","react_default","a","createElement","className","score","lives","Button","concat","val","children","isNaN","onClick","handleClick","Input","input","ClearButton","handleClear","BackButton","handleBack","Bomb","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","decreaseTimer","setState","prevState","timer","state","value","inherits","createClass","key","setInterval","clearInterval","handleRemove","position","Fragment","Math","round","src","image","alt","Component","App","handleKey","e","isOperator","addToInput","parseExpression","clearInput","removeLastInput","createBomb","b","bombs","i","length","id","floor","random","removeBomb","index","arr","operators","some","operator","includes","substring","slice","handleEqual","roundedVal","math","filter","element","map","handleScore","String","chain","checkEval","console","log","ops","charAt","result","setTimeout","_this2","document","addEventListener","removeEventListener","_this3","AppBar_AppBar","bomb","style","paddingLeft","width","Bomb_Bomb","Input_Input","Button_Button","ClearButton_ClearButton","BackButton_BackButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b59ae52.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bomb.9280f166.png\";","import React from 'react'\nimport './AppBar.css'\n\nexport function AppBar(props) {\n    return (\n        <div className=\"appbar\">\n            <div className=\"score\">Score: {props.score}</div>\n            <div className=\"lives\">Lives: {props.lives}</div>\n        </div>\n    )\n}","import React from 'react';\nimport './Button.css';\n\nconst isOperator = val => {\n    return !isNaN(val) || val === \".\" || val === \"=\";\n}\n\nexport const Button = props => (\n    <div className={`button-wrapper ${\n        isOperator(props.children) ? null : \"operator\"\n        }`}\n        onClick = {() => props.handleClick(props.children)}\n    >\n        {props.children}\n    </div>\n)","import React from 'react';\nimport './Input.css'\n\nexport const Input = props => (\n    <div className=\"input\">{props.input}</div>\n);","import React from 'react';\nimport './ClearButton.css';\n\nexport const ClearButton = props => (\n    <div className=\"clear-btn\" onClick={props.handleClear}>\n        {props.children}\n    </div>\n)","import React from 'react';\nimport './BackButton.css';\n\nexport const BackButton = props => (\n    <div className=\"back-btn\" onClick={props.handleBack}>\n        {props.children}\n    </div>\n)","import React, { Component } from 'react';\nimport image from '../images/bomb.png'\nimport './Bomb.css';\n\nexport class Bomb extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      timer: 0,\n      value: 0\n    }\n  }\n\n  timer;\n\n  componentDidMount() {\n    this.timer = setInterval(this.decreaseTimer, 1500);\n    this.setState({\n      timer: this.props.timer,\n      value: this.props.value\n    })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  componentDidUpdate() {\n    if(this.state.timer === 0)\n     this.props.handleRemove(this.props.position);\n  }\n\n  decreaseTimer = () => {\n    this.setState(prevState => ({timer: prevState.timer - 1}));\n  }\n\n  render() {\n    return (\n        <>\n          <div className=\"value\">{this.state.value}</div>\n          <div className=\"timer\">{Math.round(this.state.timer * 100) / 100}</div>\n          <img src={image} alt=\"bomb\" />\n        </>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { AppBar } from \"./components/AppBar\"\nimport { Button } from \"./components/Button\";\nimport { Input } from \"./components/Input\";\nimport { ClearButton } from \"./components/ClearButton\";\nimport { BackButton } from \"./components/BackButton\";\nimport { Bomb } from \"./components/Bomb\"\nimport * as math from \"mathjs\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.operators = ['+', '-', '*', '/'];\n    this.state = {\n      input: '',\n      bombs: [null, null, null],\n      id: 0,\n      score: 0,\n      lives: 3\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKey);\n    setInterval(() => {\n      this.createBomb()\n    }, 5000);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKey);\n  }\n\n  handleKey = e => {\n    if (e.key === '.' || !isNaN(e.key) || this.isOperator(e.key))\n      this.addToInput(e.key);\n    else if (e.key === 'Enter' || e.key === '=')\n      this.parseExpression();\n    else if (e.key === 'c')\n      this.clearInput();\n    else if (e.key === 'Backspace')\n      this.removeLastInput();\n  }\n\n  createBomb = () => {\n    let b = this.state.bombs;\n    for (let i = 0; i < b.length; i++) {\n      if (!b[i]) {\n        b[i] = {\n          key: this.state.id,\n          position: i,\n          timer: 5 + Math.floor(Math.random() * 5),\n          value: Math.floor(Math.random() * 10)\n        }\n        this.setState({ bombs: b })\n        return;\n      }\n    }\n  }\n\n  removeBomb = index => {\n    const arr = this.state.bombs;\n    arr[index] = null;\n    this.setState({ bombs: arr })\n  }\n\n  isOperator = val => this.operators.some(operator => val.includes(operator));\n\n  clearInput = () => this.setState({ input: \"\" })\n  removeLastInput = () => this.setState({ input: this.state.input.substring(0, this.state.input.length - 1) })\n\n  // Adds the selected button's value to the input.\n  // Stops operators and decimal points from being added if\n  // the input is empty or the last input is not a number.\n  addToInput = val => {\n    const input = this.state.input;\n    if ((input !== \"\" && !isNaN((input).slice(-1))) || !isNaN(val))\n      this.setState({ input: this.state.input + val });\n  };\n\n  // evaluate the input return the result\n  handleEqual = val => {\n    const roundedVal = Math.round((math.eval(val) + 0.00001) * 100) / 100\n    const arr = this.state.bombs.filter(element => element !== null);\n    arr.filter(element => element.value === roundedVal)\n      .map(element => this.handleScore(element.position))\n    return String(roundedVal)\n  };\n\n  handleScore = position => {\n    this.removeBomb(position);\n    this.setState(prevState => ({score: prevState.score + 100}))\n  }\n\n  chain = 1;\n  // returns if the input includes an operator and that it ends with a number\n  checkEval = () => {\n    const input = this.state.input;\n    if (this.isOperator(input))\n      if (!isNaN(input.slice(-1)))\n        return true;\n      else console.log(\"error: doesnt end with number\");\n    else console.log(\"error: needs to include an operator\");\n\n    return false;\n  };\n\n  parseExpression = () => {\n    const input = this.state.input;\n    let ops = 0;\n    if (this.checkEval()) {\n      // loops through each char in input and check if its an operator\n      // loop starts at 1 to avoid intrepeting a negative sign as a minus operator\n      for (let i = 1; i < input.length; i++) {\n        if (this.isOperator(input.charAt(i)))\n          ops++;\n        if (ops === 2) {\n          let result = this.handleEqual(input.slice(0, i));\n          this.setState({ input: result + input.slice(i) });\n          return setTimeout(() => this.parseExpression(), 1000)\n        }\n      }\n      return this.setState({ input: this.handleEqual(input) });\n    }\n    return console.log(\"not valid to parse\")\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <AppBar score={this.state.score} lives={this.state.lives} />\n        <div className=\"game\">\n          <div className=\"bomb-wrapper\">\n            {this.state.bombs.map(bomb => {\n              return (\n                <div style={{ paddingLeft: 34, width: 50 }}>\n                  {bomb ? <Bomb position={bomb.position} timer={bomb.timer} value={bomb.value} handleRemove={this.removeBomb} /> : null}\n                </div>\n              )\n            })}\n          </div>\n          <div className=\"calc-wrapper\">\n            <Input input={this.state.input} />\n            <div className=\"row\">\n              <Button handleClick={this.addToInput}>7</Button>\n              <Button handleClick={this.addToInput}>8</Button>\n              <Button handleClick={this.addToInput}>9</Button>\n              <Button handleClick={this.addToInput}>/</Button>\n            </div>\n            <div className=\"row\">\n              <Button handleClick={this.addToInput}>4</Button>\n              <Button handleClick={this.addToInput}>5</Button>\n              <Button handleClick={this.addToInput}>6</Button>\n              <Button handleClick={this.addToInput}>*</Button>\n            </div>\n            <div className=\"row\">\n              <Button handleClick={this.addToInput}>1</Button>\n              <Button handleClick={this.addToInput}>2</Button>\n              <Button handleClick={this.addToInput}>3</Button>\n              <Button handleClick={this.addToInput}>-</Button>\n            </div>\n            <div className=\"row\">\n              <Button handleClick={this.addToInput}>.</Button>\n              <Button handleClick={this.addToInput}>0</Button>\n              <Button handleClick={this.parseExpression}>=</Button>\n              <Button handleClick={this.addToInput}>+</Button>\n            </div>\n            <div className=\"row\">\n              <ClearButton handleClear={this.clearInput}>\n                Clear\n              </ClearButton>\n              <BackButton handleBack={this.removeLastInput}>\n                ←\n            </BackButton>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}