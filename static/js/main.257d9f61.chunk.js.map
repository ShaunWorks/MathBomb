{"version":3,"sources":["images/bomb.png","components/Button.jsx","components/Input.jsx","components/ClearButton.jsx","components/BackButton.jsx","components/Bomb.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Button","props","react_default","a","createElement","className","concat","val","children","isNaN","onClick","handleClick","Input","input","ClearButton","handleClear","BackButton","handleBack","Bomb","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","decreaseTimer","setState","prevState","timer","state","value","inherits","createClass","key","setInterval","clearInterval","Math","round","src","image","alt","Component","App","handleKey","e","isOperator","addToInput","parseExpression","clearInput","removeLastInput","createBomb","b","bombs","length","push","id","floor","random","removeBomb","arr","splice","operators","some","operator","includes","substring","slice","handleEqual","roundedVal","math","index","findIndex","element","String","checkEval","console","log","ops","i","charAt","result","setTimeout","_this2","document","addEventListener","removeEventListener","map","bomb","Bomb_Bomb","Input_Input","Button_Button","ClearButton_ClearButton","BackButton_BackButton","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iWCO3BC,iBAAS,SAAAC,GAAK,OACvBC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,kBAAAC,QALCC,EAMAN,EAAMO,SALbC,MAAMF,IAAgB,MAARA,GAAuB,MAARA,EAKG,WAAP,OAE7BG,QAAW,kBAAMT,EAAMU,YAAYV,EAAMO,YAExCP,EAAMO,UAVI,IAAAD,ICANK,UAAQ,SAAAX,GAAK,OACtBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASJ,EAAMY,SCDrBC,UAAc,SAAAb,GAAK,OAC5BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAAYK,QAAST,EAAMc,aACrCd,EAAMO,YCFFQ,UAAa,SAAAf,GAAK,OAC3BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWK,QAAST,EAAMgB,YACpChB,EAAMO,8BCDFU,UAAb,SAAAC,GACE,SAAAD,EAAYjB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMtB,KAsBR0B,cAAgB,WACdP,EAAKQ,SAAS,SAAAC,GAAS,MAAK,CAACC,MAAOD,EAAUC,MAAQ,MArBtDV,EAAKW,MAAQ,CACXD,MAAO,EACPE,MAAO,GALQZ,EADrB,OAAAC,OAAAY,EAAA,EAAAZ,CAAAH,EAAAC,GAAAE,OAAAa,EAAA,EAAAb,CAAAH,EAAA,EAAAiB,IAAA,oBAAAH,MAAA,WAaIT,KAAKO,MAAQM,YAAYb,KAAKI,cAAe,KAC7CJ,KAAKK,SAAS,CACZE,MAAOP,KAAKtB,MAAM6B,MAClBE,MAAOT,KAAKtB,MAAM+B,UAhBxB,CAAAG,IAAA,uBAAAH,MAAA,WAqBIK,cAAcd,KAAKO,SArBvB,CAAAK,IAAA,SAAAH,MAAA,WA6BI,OACI9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASkB,KAAKQ,MAAMC,OACnC9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASiC,KAAKC,MAAyB,IAAnBhB,KAAKQ,MAAMD,OAAe,KAC7D5B,EAAAC,EAAAC,cAAA,OAAKoC,IAAKC,IAAOC,IAAI,cAjC/BxB,EAAA,CAA0ByB,uBCuKXC,EAlKf,SAAAzB,GACE,SAAAyB,EAAY3C,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqB,IACjBxB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuB,GAAAlB,KAAAH,KAAMtB,KAqBR4C,UAAY,SAAAC,GACI,MAAVA,EAAEX,MAAgB1B,MAAMqC,EAAEX,MAAQf,EAAK2B,WAAWD,EAAEX,KACtDf,EAAK4B,WAAWF,EAAEX,KACD,UAAVW,EAAEX,KAA6B,MAAVW,EAAEX,IAC9Bf,EAAK6B,kBACY,MAAVH,EAAEX,IACTf,EAAK8B,aACY,cAAVJ,EAAEX,KACTf,EAAK+B,mBA9BU/B,EAiCnBgC,WAAa,WACX,IAAIC,EAAIjC,EAAKW,MAAMuB,MACfD,EAAEE,OAAS,IACbF,EAAEG,KAAK,CACLrB,IAAKf,EAAKW,MAAM0B,GAChBA,GAAIrC,EAAKW,MAAM0B,GACf3B,MAAOQ,KAAKoB,MAAsB,GAAhBpB,KAAKqB,UACvB3B,MAAOM,KAAKoB,MAAsB,GAAhBpB,KAAKqB,YAG3BvC,EAAKQ,SAAS,CAAE0B,MAAOD,GACrBjC,EAAKQ,SAAS,CAAE6B,GAAIrC,EAAKW,MAAM0B,GAAK,OA5CrBrC,EAgDnBwC,WAAa,SAAAH,GACX,IAAMI,EAAMzC,EAAKW,MAAMuB,MACvBO,EAAIC,OAAOL,EAAI,GAEfrC,EAAKQ,SAAS,CAAE0B,MAAOO,KApDNzC,EAuDnB2B,WAAa,SAAAxC,GAAG,OAAIa,EAAK2C,UAAUC,KAAK,SAAAC,GAAQ,OAAI1D,EAAI2D,SAASD,MAvD9C7C,EAyDnB8B,WAAa,kBAAM9B,EAAKQ,SAAS,CAAEf,MAAO,MAzDvBO,EA0DnB+B,gBAAkB,kBAAM/B,EAAKQ,SAAS,CAAEf,MAAOO,EAAKW,MAAMlB,MAAMsD,UAAU,EAAG/C,EAAKW,MAAMlB,MAAM0C,OAAS,MA1DpFnC,EA+DnB4B,WAAa,SAAAzC,GACX,IAAMM,EAAQO,EAAKW,MAAMlB,OACV,KAAVA,GAAiBJ,MAAOI,EAAOuD,OAAO,MAAS3D,MAAMF,IACxDa,EAAKQ,SAAS,CAAEf,MAAOO,EAAKW,MAAMlB,MAAQN,KAlE3Ba,EAsEnBiD,YAAc,SAAA9D,GACZ,IAAM+D,EAAahC,KAAKC,MAAmC,KAA5BgC,OAAUhE,GAAO,OAAkB,IAE5DiE,EADMpD,EAAKW,MAAMuB,MACLmB,UAAU,SAAAC,GAAY,OAAOA,EAAQ1C,QAAUsC,IAGjE,OAFe,IAAXE,GACFpD,EAAKwC,WAAWY,GACXG,OAAOL,IA5EGlD,EAgFnBwD,UAAY,WACV,IAAM/D,EAAQO,EAAKW,MAAMlB,MACzB,GAAIO,EAAK2B,WAAWlC,GAApB,CACE,IAAKJ,MAAMI,EAAMuD,OAAO,IACtB,OAAO,EACJS,QAAQC,IAAI,sCACdD,QAAQC,IAAI,uCAEjB,OAAO,GAxFU1D,EA2FnB6B,gBAAkB,WAChB,IAAMpC,EAAQO,EAAKW,MAAMlB,MACrBkE,EAAM,EACV,GAAI3D,EAAKwD,YAAa,CAGpB,IAAK,IAAII,EAAI,EAAGA,EAAInE,EAAM0C,OAAQyB,IAGhC,GAFI5D,EAAK2B,WAAWlC,EAAMoE,OAAOD,KAC/BD,IACU,IAARA,EAAW,CACb,IAAIG,EAAS9D,EAAKiD,YAAYxD,EAAMuD,MAAM,EAAGY,IAE7C,OADA5D,EAAKQ,SAAS,CAAEf,MAAOqE,EAASrE,EAAMuD,MAAMY,KACrCG,WAAW,kBAAM/D,EAAK6B,mBAAmB,KAGpD,OAAO7B,EAAKQ,SAAS,CAAEf,MAAOO,EAAKiD,YAAYxD,KAEjD,OAAOgE,QAAQC,IAAI,uBAzGnB1D,EAAK2C,UAAY,CAAC,IAAK,IAAK,IAAK,KACjC3C,EAAKW,MAAQ,CACXlB,MAAO,GACPyC,MAAO,GACPG,GAAI,GAPWrC,EADrB,OAAAC,OAAAY,EAAA,EAAAZ,CAAAuB,EAAAzB,GAAAE,OAAAa,EAAA,EAAAb,CAAAuB,EAAA,EAAAT,IAAA,oBAAAH,MAAA,WAYsB,IAAAoD,EAAA7D,KAClB8D,SAASC,iBAAiB,UAAW/D,KAAKsB,WAC1CT,YAAY,WACVgD,EAAKhC,cACJ,OAhBP,CAAAjB,IAAA,uBAAAH,MAAA,WAoBIqD,SAASE,oBAAoB,UAAWhE,KAAKsB,aApBjD,CAAAV,IAAA,SAAAH,MAAA,WAiHI,OACE9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZkB,KAAKQ,MAAMuB,MAAMkC,IAAI,SAAAC,GACpB,OAAOvF,EAAAC,EAAAC,cAACsF,EAAD,CAAMvD,IAAKsD,EAAKhC,GAAIA,GAAIgC,EAAKhC,GAAI3B,MAAO2D,EAAK3D,MAAOE,MAAOyD,EAAKzD,WAG3E9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAACuF,EAAD,CAAO9E,MAAOU,KAAKQ,MAAMlB,QACzBX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,KACA9C,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,KACA9C,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,KACA9C,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,MAEF9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,KACA9C,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,KACA9C,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,KACA9C,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,MAEF9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,KACA9C,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,KACA9C,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,KACA9C,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,MAEF9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,KACA9C,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,KACA9C,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAK0B,iBAA1B,KACA/C,EAAAC,EAAAC,cAACwF,EAAD,CAAQjF,YAAaY,KAAKyB,YAA1B,MAEF9C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACyF,EAAD,CAAa9E,YAAaQ,KAAK2B,YAA/B,SAGAhD,EAAAC,EAAAC,cAAC0F,EAAD,CAAY7E,WAAYM,KAAK4B,iBAA7B,kBAvJdP,EAAA,CAAyBD,aCGLoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnG,EAAAC,EAAAC,cAACkG,EAAD,MAASjB,SAASkB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.257d9f61.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bomb.9280f166.png\";","import React from 'react';\nimport './Button.css';\n\nconst isOperator = val => {\n    return !isNaN(val) || val === \".\" || val === \"=\";\n}\n\nexport const Button = props => (\n    <div className={`button-wrapper ${\n        isOperator(props.children) ? null : \"operator\"\n        }`}\n        onClick = {() => props.handleClick(props.children)}\n    >\n        {props.children}\n    </div>\n)","import React from 'react';\nimport './Input.css'\n\nexport const Input = props => (\n    <div className=\"input\">{props.input}</div>\n);","import React from 'react';\nimport './ClearButton.css';\n\nexport const ClearButton = props => (\n    <div className=\"clear-btn\" onClick={props.handleClear}>\n        {props.children}\n    </div>\n)","import React from 'react';\nimport './BackButton.css';\n\nexport const BackButton = props => (\n    <div className=\"back-btn\" onClick={props.handleBack}>\n        {props.children}\n    </div>\n)","import React, { Component } from 'react';\nimport image from '../images/bomb.png'\nimport './Bomb.css';\n\nexport class Bomb extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      timer: 0,\n      value: 0\n    }\n  }\n\n  timer;\n\n  componentDidMount() {\n    this.timer = setInterval(this.decreaseTimer, 1000);\n    this.setState({\n      timer: this.props.timer,\n      value: this.props.value\n    })\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  decreaseTimer = () => {\n    this.setState(prevState => ({timer: prevState.timer - 1}));\n  }\n\n  render() {\n    return (\n        <div className=\"bomb\">\n          <div className=\"value\">{this.state.value}</div>\n          <div className=\"timer\">{Math.round(this.state.timer * 100) / 100}</div>\n          <img src={image} alt=\"bomb\" />\n        </div>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { Button } from \"./components/Button\";\nimport { Input } from \"./components/Input\";\nimport { ClearButton } from \"./components/ClearButton\";\nimport { BackButton } from \"./components/BackButton\";\nimport { Bomb } from \"./components/Bomb\"\nimport * as math from \"mathjs\";\n\nexport class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.operators = ['+', '-', '*', '/'];\n    this.state = {\n      input: '',\n      bombs: [],\n      id: 0\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKey);\n    setInterval(() => {\n      this.createBomb()\n    }, 5000);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.handleKey);\n  }\n\n  handleKey = e => {\n    if (e.key === '.' || !isNaN(e.key) || this.isOperator(e.key))\n      this.addToInput(e.key);\n    else if (e.key === 'Enter' || e.key === '=')\n      this.parseExpression();\n    else if (e.key === 'c')\n      this.clearInput();\n    else if (e.key === 'Backspace')\n      this.removeLastInput();\n  }\n\n  createBomb = () => {\n    let b = this.state.bombs;\n    if (b.length < 3) {\n      b.push({\n        key: this.state.id,\n        id: this.state.id,\n        timer: Math.floor(Math.random() * 10),\n        value: Math.floor(Math.random() * 10)\n      })\n\n    this.setState({ bombs: b },\n      this.setState({ id: this.state.id + 1 }))\n    }\n  }\n\n  removeBomb = id => {\n    const arr = this.state.bombs;\n    arr.splice(id, 1)\n    //arr.find(element => { return element.id === id})\n    this.setState({ bombs: arr })\n  }\n\n  isOperator = val => this.operators.some(operator => val.includes(operator));\n\n  clearInput = () => this.setState({ input: \"\" })\n  removeLastInput = () => this.setState({ input: this.state.input.substring(0, this.state.input.length - 1) })\n\n  // Adds the selected button's value to the input.\n  // Stops operators and decimal points from being added if\n  // the input is empty or the last input is not a number.\n  addToInput = val => {\n    const input = this.state.input;\n    if ((input !== \"\" && !isNaN((input).slice(-1))) || !isNaN(val))\n      this.setState({ input: this.state.input + val });\n  };\n\n  // evaluate the input return the result\n  handleEqual = val => {\n    const roundedVal = Math.round((math.eval(val) + 0.00001) * 100) / 100\n    const arr = this.state.bombs;\n    const index = arr.findIndex(element => {return element.value === roundedVal})\n    if (index !== -1)\n      this.removeBomb(index)\n    return String(roundedVal)\n  };\n\n  // returns if the input includes an operator and that it ends with a number\n  checkEval = () => {\n    const input = this.state.input;\n    if (this.isOperator(input))\n      if (!isNaN(input.slice(-1)))\n        return true;\n      else console.log(\"error: doesnt end with number\");\n    else console.log(\"error: needs to include an operator\");\n\n    return false;\n  };\n\n  parseExpression = () => {\n    const input = this.state.input;\n    let ops = 0;\n    if (this.checkEval()) {\n      // loops through each char in input and check if its an operator\n      // loop starts at 1 to avoid intrepeting a negative sign as a minus operator\n      for (let i = 1; i < input.length; i++) {\n        if (this.isOperator(input.charAt(i)))\n          ops++;\n        if (ops === 2) {\n          let result = this.handleEqual(input.slice(0, i));\n          this.setState({ input: result + input.slice(i) });\n          return setTimeout(() => this.parseExpression(), 1000)\n        }\n      }\n      return this.setState({ input: this.handleEqual(input) });\n    }\n    return console.log(\"not valid to parse\")\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"game\">\n          <div className=\"bomb-wrapper\">\n            {this.state.bombs.map(bomb => {\n              return <Bomb key={bomb.id} id={bomb.id} timer={bomb.timer} value={bomb.value}/>\n            })}\n          </div>\n          <div className=\"calc-wrapper\">\n            <Input input={this.state.input} />\n            <div className=\"row\">\n              <Button handleClick={this.addToInput}>7</Button>\n              <Button handleClick={this.addToInput}>8</Button>\n              <Button handleClick={this.addToInput}>9</Button>\n              <Button handleClick={this.addToInput}>/</Button>\n            </div>\n            <div className=\"row\">\n              <Button handleClick={this.addToInput}>4</Button>\n              <Button handleClick={this.addToInput}>5</Button>\n              <Button handleClick={this.addToInput}>6</Button>\n              <Button handleClick={this.addToInput}>*</Button>\n            </div>\n            <div className=\"row\">\n              <Button handleClick={this.addToInput}>1</Button>\n              <Button handleClick={this.addToInput}>2</Button>\n              <Button handleClick={this.addToInput}>3</Button>\n              <Button handleClick={this.addToInput}>-</Button>\n            </div>\n            <div className=\"row\">\n              <Button handleClick={this.addToInput}>.</Button>\n              <Button handleClick={this.addToInput}>0</Button>\n              <Button handleClick={this.parseExpression}>=</Button>\n              <Button handleClick={this.addToInput}>+</Button>\n            </div>\n            <div className=\"row\">\n              <ClearButton handleClear={this.clearInput}>\n                Clear\n              </ClearButton>\n              <BackButton handleBack={this.removeLastInput}>\n                ←\n            </BackButton>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}